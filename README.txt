# 3D Pathfinding Space Station

A fun project to navigate a **3D space station** from a detention cell to a spaceship hangar using **maze-solving algorithms**. The goal is to escape from **start (`S`)** to **hangar (`H`)** in a multi-level station using **BFS (queue, `--queue`)** for the shortest path or **DFS (stack, `--stack`)** for a valid path. Build with `make`. Run with `./pathfinder --stack < input.txt > output.txt` (DFS, map output) or `./pathfinder --queue --output L < input.txt > output.txt` (BFS, list output). Options: `--stack, -s` (DFS), `--queue, -q` (BFS), `--output M|L, -o M|L` (map `M` or list `L`, default `M`), `--help, -h` (usage). Must specify either `--stack` or `--queue`. Station has up to **10 square levels**: `.` (floor), `#` (wall), `S` (start), `H` (hangar), `E` (elevator), with moves `n`, `e`, `s`, `w`, or `0-9` (elevator exit). Input formats: **Map (`M`)**: `M\n2\n4\n.H..\n....\nE..S\n#..#\n....\n#...\nE#..\n#...`; **Coordinate List (`L`)**: `L\n2\n4\n(0,0,1,H)\n(0,2,0,E)\n(1,2,0,E)\n(0,2,3,S)\n(0,3,0,#)`. Output: **Map (BFS)**: `Start in level 0, row 2, column 3\n//level 0\n.Hww\n...n\nE..n\n#..#\n//level 1\n....\n#...\nE#..\n#...`; **List (BFS)**: `//path taken\n(0,2,3,n)\n(0,1,3,n)\n(0,0,3,w)\n(0,0,2,w)`. Files: `pathfinder.cpp` (code), `Makefile` (build), `test-*.txt` (e.g., `test-1-qm.txt`). Built in **C++** with `std::deque` for stack/queue, `getopt_long()` for parsing, handles up to **65,535 tiles** in **under 35 seconds**. **BFS** is fast, **DFS** feels exploratory. Try it and share **maze ideas**! ðŸš€ *Last updated: March 16, 2025*
